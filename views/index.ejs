<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TodoApp</title>
    <link rel="stylesheet" href="tailwind.css">

</head>
<body>
    <div id="app">
        <div class="mx-5 md:mx-40 py-3 md:py-6 flex flex-col">
            <div class="flex flex-row">
                <input v-model="inputTitle" type="text" placeholder="Write Somethings " class="flex w-full py-2 px-3 filter drop-shadow-md rounded-lg border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <button @click="add()" class="py-2 px-3 bg-blue-500 rounded-md filter drop-shadow-md ml-3 text-white">Add</button>
            </div>
            <div class="todo bg-blue-50 w-full mt-3 rounded-md filter drop-shadow-md " v-for="(item,index) in dataTodo" :key="items">
                <div class="flex px-6 pt-6">
                    <h1 class="text-3xl md:text-4xl text-gray-700" :class="{'line-through':item.complete}">{{item.title}}</h1>
                </div>
                <div class="flex justify-end px-6 pb-6 mt-1">
                    <button @click="update({id:item.___id,data:{complete:!item.complete}})" class="text-1xl bg-blue-500 text-white rounded-md py-1 px-4 filter drop-shadow-md mr-1"><span v-if="item.complete">Open</span><span v-else>Done</span></button>
                    <button @click="del(item.___id)" class="text-1xl bg-red-500 text-white rounded-md py-1 px-4 filter drop-shadow-md">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Script -->
    <script src="/vue.js"></script>
    <script src="/vuex.js"></script>

    <script>

        const App = {
            mounted() {
                this.$store.dispatch('loadData');
            },
            data(){
                return{
                    msg:'hi',
                    inputTitle:'',
                }
            },
            computed:{
                dataTodo() {
                    return this.$store.state.data
                },

            },
            methods:{
                chg(data){
                    if (!false) {
                        return 'Open'
                    }else{
                        return 'Done'
                    }
                },
                add(){
                    this.$store.dispatch('addData',{
                        "title":this.inputTitle,
                        "complete":false
                    })
                },
                del(id){
                    this.$store.dispatch('deleteData',id)
                },
                update(pyld){
                    this.$store.dispatch('updateData',pyld)
                }
            }
        }
        const store = Vuex.createStore({
            state(){
                return{
                    data:[]
                }
            },
            mutations:{
                GET_TODO(state,data){
                    state.data = data
                },
                DEL_TODO(state,id){
                    let index = state.data.findIndex(x=> x.___id == id)
                    console.log(id);
                    state.data.splice(index,1)
                },
                ADD_TODO(state,payloadResponse){
                    state.data.push(paloadResponse)
                }
            },
            actions:{
                loadData({commit}){
                    fetch('/all').then(x=>x.json()).then((x)=>{
                        commit('GET_TODO',x)
                    }).catch(err=>{
                        throw new Error(`API ${err}`)
                    })
                },
                addData({dispatch},payloads){
                    fetch(`/add`,{
                        method:'POST',
                        headers:{
                            'Content-type':'application/json'
                        },
                        body:JSON.stringify(payloads)
                    }).then(x=>x.json()).then(x=>{
                        dispatch('loadData')
                    }).catch(err=>{
                        throw new Error(`API ${err}`)
                    })
                },
                updateData({commit,dispatch},payloads){
                    fetch(`/update/${payloads.id}`,{
                        method:'PUT',
                        headers:{
                            'Content-type':'application/json'
                        },
                        body:JSON.stringify(payloads.data)
                    }).then(x=>x.json()).then(x=>{
                        dispatch('loadData')
                    }).catch(err=>{
                        throw new Error(`API ${err}`)
                    })
                },
                deleteData({commit},id){
                    fetch(`/delete/${id}`,{
                        method:'DELETE'
                    }).then(x=>x.json()).then(x=>{
                        commit('DEL_TODO',id)
                    }).catch(err=>{
                        throw new Error(`API ${err}`)
                    })
                }
            }
        })
        Vue.createApp(App).use(store).mount('#app')

    </script>

</body>
</html>